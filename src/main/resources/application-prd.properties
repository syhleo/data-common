spring.application.name=icore-data-common
api.version=v1
server.port=96
server.tomcat.uri-encoding=UTF-8
### springboot 监控 Actuator ，https://www.cnblogs.com/ming-blogs/p/10697033.html
#actuator默认只支持端点 /health、/info
#暴露部分端点
#management.endpoints.web.exposure.include=info,health,beans,env
#暴露所有端点
#management.endpoints.web.exposure.include=*
#不暴露beans端点
#management.endpoints.web.exposure.exclude=env
#启用shutdown
endpoints.shutdown.enabled=true
#禁用密码验证
endpoints.shutdown.sensitive=false
login.get=true
#7*24*60*60*1000
access.token.ttl=604800000
#3*7*24*60*60*1000
refresh.token.ttl=1814400000
# 关闭off   控制台console  日志文件log
spring.main.banner-mode=console
# 拦截器附加配置：每8个url路径以;分隔；url的逗号后auth表示需要认证后才能访问，没有或者anon表示不校验
shiro.chains=/*
#/auth/login;/${api.version}/sys/**/export;/${api.version}/sys/**/import;/**,auth
# 拦截器附加配置：每个url路径以;分隔；url的逗号后auth表示认证后才能访问，没有或者anon表示不校验
shiro.chains.append=/swagger**;
#/img/**;/${api.version}/sysposts/list/user**;/webjars/**;/v2/api**;/images/**;/configuration/**


##使用springboot整合redis后的
redis.enabled=true
# Redis数据库索引（默认为0） Redis默认情况下有16个分片，这里配置具体使用的分片，默认是0
spring.redis.database=0
# Redis服务器地址
spring.redis.host=172.16.0.76
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=123456
# 连接超时时间（毫秒）
spring.redis.timeout=1000
# 连接池最大连接数（使用负值表示没有限制）  默认 8
spring.redis.lettuce.pool.max-active=200
# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
spring.redis.lettuce.pool.max-wait=-1
# 连接池中的最大空闲连接     默认 8
spring.redis.lettuce.pool.max-idle=10
# 连接池中的最小空闲连接     默认 0
spring.redis.lettuce.pool.min-idle=0
# 关闭超时时间
spring.redis.lettuce.shutdown-timeout=1000
# 集群节点（多个节点使用逗号分隔）
spring.redis.cluster.nodes=192.168.58.100:6379,192.168.58.101:6379






##日志
#logging.level.*=INFO
##注：logging.path和logging.file二者不能同时使用，如若同时使用，则只有logging.file生效
##默认情况下，日志文件的大小达到10MB时会切分一次，产生新的日志文件，默认级别为：ERROR、WARN、INFO
#logging.path=output/logs
#logging.file=datashare.log
##控制台彩色输出  默认是DETECT，也就是自动检测。
##spring.output.ansi.enabled=DETECT
#spring.output.ansi.enabled=ALWAYS
##com.steer.data包下所有class以INFO级别输出
#logging.level.com.steer.data=INFO
cache.level=1
# 开发时关闭缓存,不然没法看到实时页面
spring.thymeleaf.cache=false
#模板thymeleaf start
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.content-type=text/html
#thymeleaf end
#国际化
spring.messages.basename=message
spring.messages.encoding=UTF-8
#时间戳
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8
#如果逆向排除这些路径，可以使用如下配置，即可以自己设置不重启的目录
#spring.devtools.restart.enabled=true
#spring.devtools.restart.exclude=static/**,public/**
# MyBatis 配置
#mybatis:config-location=classpath:mybatis-config.xml
#mybatis.mapper-locations=classpath*:com/steer/mapper/*Mapper.xml
### MyBatis-Plus 配置
#mybatis-plus 别名包扫描路径，通过该属性可以给包中的类注册别名
#mybatis-plus.type-aliases-package=com.steer.data.**
##com.fxbin.mybatisplus.bean.*
##mybatis-plus mapper xml 文件地址
#mybatis-plus.mapper-locations= classpath*:com/steer/mapper/*Mapper.xml
#mybatis-plus.mapper-locations=classpath:/mapping/*Mapper.xml
#mybatis-plus.mapper-locations=classpath*:/com/steer/*/mapper/*Mapper.xml
#mybatis-plus.typeAliasesPackage=com.steer.data.db.*.model
##这个配置会将执行的sql打印出来，在开发或测试的时候可以用
#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
##配置的缓存的全局开关
#mybatis-plus.configuration.cache-enabled=true
##延时加载的开关
#mybatis-plus.configuration.lazy-loading-enabled=true
## 开启的话，延时加载一个属性时会加载该对象全部属性，否则按需加载属性
#mybatis-plus.configuration.multiple-result-sets-enabled=true
###spring boot自动配置单数据源###
#保留但不生效
spring.datasource.url=jdbc:oracle:thin:@127.0.0.1:1521:sale
spring.datasource.username=11111
spring.datasource.password=22222
multipart.maxFileSize=50Mb
multipart.maxRequestSize=50Mb
#server.tomcat.max-threads=200
##################    连接池配置    ################
#连接池建立时创建的初始化连接数
spring.datasource.druid.initial-size=5
#连接池中最大的活跃连接数
spring.datasource.druid.max-active=20
#连接池中最小的活跃连接数
spring.datasource.druid.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
#spring.datasource.druid.max-open-prepared-statements= #和上面的等价
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
spring.datasource.druid.validation-query-timeout=30000
#是否在获得连接后检测其可用性
spring.datasource.druid.test-on-borrow=false
#是否在连接放回连接池后检测其可用性
spring.datasource.druid.test-on-return=false
#是否在连接空闲一段时间后检测其可用性
spring.datasource.druid.test-while-idle=true
#spring.datasource.druid.time-between-eviction-runs-millis=
#spring.datasource.druid.min-evictable-idle-time-millis=
#spring.datasource.druid.max-evictable-idle-time-millis=
#quartz集群模式开关，true开启，false关闭，集群开启，相应quartz数据源连接的数据库需配置quartz相关表【11个表】。
quartz.enabled=true
#spring.profiles.include 的作用是可以叠加新的profile
spring.profiles.include=quartz
#quartz.enabled和spring.profiles.include一起使用，如果开启quartz集群，则quartz.enabled=true，spring.profiles.include=quartz。同时数据库配置quartz相关表【11个表】
###手动配置Quartz数据源（ConfigureQuartz的quartzDataSource()生效时启动），如想在quartz集群模式下使用spring boot应用的数据源，参考ConfigureQuartz相关说明###
#spring.datasource.druid.quartz.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.druid.quartz.url=jdbc:mysql://127.0.0.1:3306/dbtest?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
#spring.datasource.druid.quartz.username=root
#spring.datasource.druid.quartz.password=123456
spring.datasource.druid.quartz.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.druid.quartz.url=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=172.16.21.168)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=xgxbc)))
spring.datasource.druid.quartz.username=XBC
spring.datasource.druid.quartz.password=XBC
#spring.datasource.druid.quartz.driver-class-name=oracle.jdbc.OracleDriver
#spring.datasource.druid.quartz.url=jdbc:oracle:thin:@172.16.0.76:1521:sale
#spring.datasource.druid.quartz.username=if
#spring.datasource.druid.quartz.password=if
###手动配置多数据源###
#master
#程序启动之后默认生效的是此数据源【multiple.datasource.master】
#multiple.datasource.master.driver-class-name=oracle.jdbc.OracleDriver
#multiple.datasource.master.url=jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = 10.252.222.101)(PORT = 1521))(ADDRESS = (PROTOCOL = TCP)(HOST = 10.252.222.102) (PORT = 1521))(LOAD_BALANCE = yes)(FAILOVER = yes)(CONNECT_DATA =(SERVER = DEDICATED)(SERVICE_NAME = xgyt)(FAILOVER_MODE=(TYPE = SELECT)(METHOD = BASIC)(RETIRES = 20)(DELAY = 15))))
#multiple.datasource.master.username=xmkt
#multiple.datasource.master.password=oracle
multiple.datasource.master.driver-class-name=oracle.jdbc.OracleDriver
multiple.datasource.master.url=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=172.16.21.168)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=xgxbc)))
multiple.datasource.master.username=XBC
multiple.datasource.master.password=XBC
#multiple.datasource.master.driver-class-name=com.mysql.jdbc.Driver
#multiple.datasource.master.url=jdbc:mysql://127.0.0.1:3306/dbtest?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
#multiple.datasource.master.username=root
#multiple.datasource.master.password=123456
#other
multiple.datasource.other.driver-class-name=oracle.jdbc.OracleDriver
multiple.datasource.other.url=jdbc:oracle:thin:@172.16.0.76:1521:sale
multiple.datasource.other.username=other
multiple.datasource.other.password=oracle
#slave1
#multiple.datasource.slave1.driver-class-name=oracle.jdbc.OracleDriver
#multiple.datasource.slave1.url=jdbc:oracle:thin:@172.16.0.76:1521:sale
#multiple.datasource.slave1.username=if
#multiple.datasource.slave1.password=if
multiple.datasource.slave1.driver-class-name=oracle.jdbc.OracleDriver
multiple.datasource.slave1.url=jdbc:oracle:thin:@172.16.0.76:1521:sale
multiple.datasource.slave1.username=xgxbc
multiple.datasource.slave1.password=xgxbc
#slave2
multiple.datasource.slave2.driver-class-name=oracle.jdbc.OracleDriver
multiple.datasource.slave2.url=jdbc:oracle:thin:@172.16.0.76:1521:sale
multiple.datasource.slave2.username=xmkt
multiple.datasource.slave2.password=oracle
#slave3
multiple.datasource.slave3.driver-class-name=oracle.jdbc.OracleDriver
multiple.datasource.slave3.url=jdbc:oracle:thin:@172.16.0.100:1521:SQMESDB
multiple.datasource.slave3.username=jhyuser
multiple.datasource.slave3.password=jhyuser
#slave4
multiple.datasource.slave4.driver-class-name=oracle.jdbc.OracleDriver
multiple.datasource.slave4.url=jdbc:oracle:thin:@(description=(address=(protocol=tcp)(port=1521)(host=172.16.0.197)(PORT = 1521))(connect_data=(SERVER = DEDICATED)(service_name=xgcxmes)))
multiple.datasource.slave4.username=cxadmin
multiple.datasource.slave4.password=CXADMIN
#slave5
multiple.datasource.slave5.driver-class-name=oracle.jdbc.OracleDriver
multiple.datasource.slave5.url=jdbc:oracle:thin:@(description=(address=(protocol=tcp)(port=1521)(host=172.16.0.100)(PORT = 1521))(connect_data=(SERVER = DEDICATED)(service_name=sqmesdb)))
multiple.datasource.slave5.username=xg3qadmin
multiple.datasource.slave5.password=cxuser
#slave6
multiple.datasource.slave6.driver-class-name=oracle.jdbc.OracleDriver
multiple.datasource.slave6.url=jdbc:oracle:thin:@(description=(address=(protocol=tcp)(port=1521)(host=172.16.0.193)(PORT = 1521))(connect_data=(SERVER = DEDICATED)(service_name=xgcxmes)))
multiple.datasource.slave6.username=cxuser
multiple.datasource.slave6.password=cxuser
#slave7
multiple.datasource.slave7.driver-class-name=oracle.jdbc.OracleDriver
multiple.datasource.slave7.url=jdbc:oracle:thin:@(description=(address=(protocol=tcp)(port=1521)(host=172.16.0.193)(PORT = 1521))(connect_data=(SERVER = DEDICATED)(service_name=xgcxmes)))
multiple.datasource.slave7.username=cxuser
multiple.datasource.slave7.password=cxuser
#slave8
multiple.datasource.slave8.driver-class-name=oracle.jdbc.OracleDriver
multiple.datasource.slave8.url=jdbc:oracle:thin:@(description=(address=(protocol=tcp)(port=1521)(host=172.16.0.193)(PORT = 1521))(connect_data=(SERVER = DEDICATED)(service_name=xgcxmes)))
multiple.datasource.slave8.username=cxuser
multiple.datasource.slave8.password=cxuser
web.upload-path=/static/
spring.mvc.static-path-pattern=/**
spring.resources.static-locations=classpath\:/META-INF/resources/,classpath\:/resources/,classpath\:/static/,classpath\:/public/,file\:${web.upload-path}
classpath=/static/,classpath:/public/,file:${web.upload-path}
#HttpClient跨服务调用接口url
#Tcp通讯参数
#ip
L2.ip=127.0.0.1
#L2.ip=10.50.80.230
L2.port=8083
nettyserver.port=8089
#aop
spring.aop.proxy-target-class=true
#设备名称 ztl tpm
acq.deviceName=tpm
# 平整机的结束符
acq.tpmTail=0A
# 罩退的结束符
acq.ztlTail=03
#netty服务端分隔符，为空时不按分隔符接收
acq.tail=0A
#填充方式 0: 右补空格，为空时传空字符串（平整机） 1：字符串右补空格 数字左补0为空时传全0（罩退）
acq.type=0
#发送方节点代码（L2）
acq.sendDC=R1
#接收方节点代码（L3）
acq.receiceDC=M1

