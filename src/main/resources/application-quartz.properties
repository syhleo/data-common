#配置是否每次重启项目都自动生成Quartz表结构,在此使用always生成一次后就可以改为never配置
spring.quartz.jdbc.initialize-schema=never
spring.quartz.job-store-type=jdbc
#调度标识名 集群中每一个实例都必须使用相同的名称  
#spring.quartz.properties.org.quartz.scheduler.instanceName=etlCleanScheduler
org.quartz.scheduler.instanceName=syhleoCleanScheduler
#ID设置为自动获取 每一个必须不同 （所有调度器实例中是唯一的） 
#spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO
org.quartz.scheduler.instanceId=AUTO
#指定调度程序的主线程是否应该是守护线程
org.quartz.scheduler.makeSchedulerThreadDaemon=true
#ThreadPool实现的类名    线程池的实现类（一般使用SimpleThreadPool即可满足几乎所有用户的需求）  
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
#ThreadPool配置线程守护进程   
org.quartz.threadPool.makeThreadsDaemons=true
#线程数 一个任务使用一个线程  线程数量  指定线程数，至少为1（无默认值）(一般设置为1-100直接的整数合适)  
org.quartz.threadPool.threadCount=30
#线程优先级
org.quartz.threadPool.threadPriority=5
#加载任务代码的ClassLoader是否从外部继承
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true
#============================================================================
# Configure RAMJobStore  
#============================================================================
#利用数据库持久化调度程序信息
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
#利用内存来持久化调度程序信息
#org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore
#通过JDBC访问数据库的代理类，可以根据您目前使用的数据库类型选择,StdJDBCDelegate说明支持集群
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#Quartz表前缀
org.quartz.jobStore.tablePrefix=QRTZ_
#是否加入集群
org.quartz.jobStore.isClustered=true
#misfire 任务的超时阈值 ms，容许的最大作业延长时间   信息保存时间 默认值60秒,这里是25秒
#org.quartz.jobStore.misfireThreshold=25000
#Quartz集群的状态更新时间间隔，即集群实例检测时间间隔 ms
org.quartz.jobStore.clusterCheckinInterval=10000
#设置为TRUE不会出现序列化非字符串类到 BLOB 时产生的类版本问题
#为了指示JDBCJobStore所有的JobDataMaps中的值都是字符串，
#并且能以“名字-值”对的方式存储而不是以复杂对象的序列化形式存储在BLOB字段中，应设置值为”true”(这是缺省的方式)。
org.quartz.jobStore.useProperties=true
acq.testleo=456leoyehleo